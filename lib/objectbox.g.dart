// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/custom_buttons.dart';
import 'models/user_preferences.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 334938437598201252),
      name: 'UserPreferences',
      lastPropertyId: const obx_int.IdUid(4, 8340790945378871382),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5372302584647965770),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7232657953265637492),
            name: 'key',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8340790945378871382),
            name: 'value',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 6888972494653824223),
      name: 'CustomButton',
      lastPropertyId: const obx_int.IdUid(8, 6951084439670185063),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 5771618847471007425),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8664178350079704003),
            name: 'address',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3970110385182387186),
            name: 'command',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3705006111939874726),
            name: 'label',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6885746394348711909),
            name: 'themeHex',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5668134743100280854),
            name: 'iconCodePoint',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6951084439670185063),
            name: 'uuid',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(1, 1259817039568598432))
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(2, 6888972494653824223),
      lastIndexId: const obx_int.IdUid(1, 1259817039568598432),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [2919581561452718789, 6963700531994760790],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    UserPreferences: obx_int.EntityDefinition<UserPreferences>(
        model: _entities[0],
        toOneRelations: (UserPreferences object) => [],
        toManyRelations: (UserPreferences object) => {},
        getId: (UserPreferences object) => object.id,
        setId: (UserPreferences object, int id) {
          object.id = id;
        },
        objectToFB: (UserPreferences object, fb.Builder fbb) {
          final keyOffset = fbb.writeString(object.key);
          final valueOffset = fbb.writeString(object.value);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, keyOffset);
          fbb.addOffset(3, valueOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final keyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = UserPreferences(key: keyParam, value: valueParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    CustomButton: obx_int.EntityDefinition<CustomButton>(
        model: _entities[1],
        toOneRelations: (CustomButton object) => [],
        toManyRelations: (CustomButton object) => {},
        getId: (CustomButton object) => object.id,
        setId: (CustomButton object, int id) {
          object.id = id;
        },
        objectToFB: (CustomButton object, fb.Builder fbb) {
          final addressOffset = fbb.writeString(object.address);
          final commandOffset = fbb.writeString(object.command);
          final labelOffset = fbb.writeString(object.label);
          final themeHexOffset = object.themeHex == null
              ? null
              : fbb.writeString(object.themeHex!);
          final uuidOffset = fbb.writeString(object.uuid);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, addressOffset);
          fbb.addOffset(3, commandOffset);
          fbb.addOffset(4, labelOffset);
          fbb.addOffset(5, themeHexOffset);
          fbb.addInt64(6, object.iconCodePoint);
          fbb.addOffset(7, uuidOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final uuidParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final commandParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final labelParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final themeHexParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final iconCodePointParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final object = CustomButton(
              uuid: uuidParam,
              address: addressParam,
              command: commandParam,
              label: labelParam,
              themeHex: themeHexParam,
              iconCodePoint: iconCodePointParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [UserPreferences] entity fields to define ObjectBox queries.
class UserPreferences_ {
  /// See [UserPreferences.id].
  static final id =
      obx.QueryIntegerProperty<UserPreferences>(_entities[0].properties[0]);

  /// See [UserPreferences.key].
  static final key =
      obx.QueryStringProperty<UserPreferences>(_entities[0].properties[1]);

  /// See [UserPreferences.value].
  static final value =
      obx.QueryStringProperty<UserPreferences>(_entities[0].properties[2]);
}

/// [CustomButton] entity fields to define ObjectBox queries.
class CustomButton_ {
  /// See [CustomButton.id].
  static final id =
      obx.QueryIntegerProperty<CustomButton>(_entities[1].properties[0]);

  /// See [CustomButton.address].
  static final address =
      obx.QueryStringProperty<CustomButton>(_entities[1].properties[1]);

  /// See [CustomButton.command].
  static final command =
      obx.QueryStringProperty<CustomButton>(_entities[1].properties[2]);

  /// See [CustomButton.label].
  static final label =
      obx.QueryStringProperty<CustomButton>(_entities[1].properties[3]);

  /// See [CustomButton.themeHex].
  static final themeHex =
      obx.QueryStringProperty<CustomButton>(_entities[1].properties[4]);

  /// See [CustomButton.iconCodePoint].
  static final iconCodePoint =
      obx.QueryIntegerProperty<CustomButton>(_entities[1].properties[5]);

  /// See [CustomButton.uuid].
  static final uuid =
      obx.QueryStringProperty<CustomButton>(_entities[1].properties[6]);
}
